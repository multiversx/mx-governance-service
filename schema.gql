# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface IAssets {
  website: String
  description: String
  status: String
  pngUrl: String
  svgUrl: String
  lockedAccounts: [String]
  extraTokens: [String]
}

type AssetsModel implements IAssets {
  website: String
  description: String
  status: String
  pngUrl: String
  svgUrl: String
  lockedAccounts: [String]
  extraTokens: [String]
}

type EsdtToken implements IEsdtToken {
  identifier: String!
  name: String!
  ticker: String!
  owner: String!
  minted: String
  burnt: String
  initialMinted: String
  decimals: Float!
  price: String
  supply: String
  circulatingSupply: String
  assets: IAssets
  transactions: Int!
  accounts: Int!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  type: String
  balance: String
}

interface IEsdtToken {
  identifier: String!
  name: String!
  ticker: String!
  owner: String!
  minted: String
  burnt: String
  initialMinted: String
  decimals: Float!
  price: String
  supply: String
  circulatingSupply: String
  assets: IAssets
  transactions: Int!
  accounts: Int!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  type: String
  balance: String
}

type ProposalVotes {
  upVotes: String!
  downVotes: String!
  downVetoVotes: String!
  abstainVotes: String!
  totalVotes: String!
  upPercentage: String!
  downPercentage: String!
  downVetoPercentage: String!
  abstainPercentage: String!
  quorum: String!
}

type GovernanceAction {
  gasLimit: Int!
  destAddress: String!
  functionName: String!
  arguments: [String!]!
}

type EsdtTokenPaymentModel {
  tokenIdentifier: String!
  tokenNonce: Float!
  amount: String!
}

type PollResults {
  pollResults: [PollResult!]!
  totalVotesCount: Int!
  totalVotingPower: String!
}

type PollResult {
  optionId: Int!
  votingPower: String!
  nrVotes: Float!
}

type PulsePollModel {
  contractAddress: String!
  pollId: Float!
  initiator: String!
  options: [String!]!
  question: String!
  status: String!
  pollEndTime: Int!
  pollResults: PollResults!
  hasVoted: Boolean!
  userVotingOption: Float!
  userVotingPower: String!
}

type PulseIdeaModel {
  contractAddress: String!
  ideaId: Float!
  initiator: String!
  description: String!
  ideaStartTime: Int!
  totalVotingPower: String!
  totalVotesCount: Int!
  hasVoted: Boolean!
  userVotingPower: String!
}

type DelegateUserVotingPower {
  providerName: String!
  scAddress: String!
  lsTokenId: String!
  userVotingPower: String!
  isEnabled: Boolean!
  hasVoted: Boolean!
}

type FileContent {
  title: String!
  description: String!
  content: String!
  proposer: String!
}

type ChainInfo {
  existsOnChain: Boolean!
  status: String
  proposalId: Float
}

type GithubProposal {
  fileName: String!
  commitHash: String!
  fileContent: FileContent!
  chainInfo: ChainInfo!
  prMerged: Boolean
  prNumber: Float
  prUrl: String
}

type GovernanceProposalModel {
  contractAddress: String!
  proposalId: Float!
  proposer: String!
  actions: [GovernanceAction!]!
  description: GovernanceDescriptionVersions!
  feePayment: EsdtTokenPaymentModel!
  minimumQuorumPercentage: String!
  votingDelayInBlocks: Int!
  votingPeriodInBlocks: Int!
  withdrawPercentageDefeated: Int!
  totalQuorum: String!
  proposalStartBlock: Int!
  status: String!
  rootHash: String!
  votes: ProposalVotes!
  hasVoted: Boolean!
  userVoteType: Float!
  userVotingPower: String!
  delegateUserVotingPowers: [DelegateUserVotingPower!]!
  userVotingPowerDirect: String!
  commitHash: String!
  startVoteTimestamp: Int!
  endVoteTimestamp: Int!
  proposalIndex: Int!
}

union GovernanceDescriptionVersions = DescriptionV0 | DescriptionV1 | DescriptionV2 | DescriptionV3

type DescriptionV0 {
  title: String!
  strapiId: Int!
  version: Float!
}

type DescriptionV1 {
  title: String!
  strapiId: Int!
  version: Float!
  shortDescription: String!
}

type DescriptionV2 {
  title: String!
  strapiId: Int!
  version: Float!
  shortDescription: String!
  strapiHash: String!
}

type DescriptionV3 {
  version: Float!
  fileContent: FileContent!
}

type TransactionModel {
  nonce: Float!
  value: String!
  sender: String!
  receiver: String!
  senderUsername: String
  receiverUsername: String
  gasPrice: Float!
  gasLimit: Float!
  data: String
  chainID: String!
  version: Float!
  options: Float
  guardian: String
  signature: String
  guardianSignature: String
}

type GovernancePulseAggregation {
  polls(pollId: Int): [PulsePollModel!]!
  ideas(ideaId: Int, offset: Int! = 0, limit: Int! = 200, sortBy: SortType, order: OrderType): [PulseIdeaModel!]!
  totalIdeas: Int!
  totalPolls: Int!
}

enum SortType {
  VOTING_POWER
  VOTES_NUMBER
  START_TIME
}

enum OrderType {
  ASCENDING
  DESCENDING
}

type Query {
  allVotes(contractAddress: String!, proposalId: Float!, vote: Float!): [TransactionModel!]!
  createProposal(contractAddress: String!, commitHash: String!, startVoteEpoch: Int!, endVoteEpoch: Int!, nativeTokenAmount: String!): TransactionModel!
  closeProposal(contractAddress: String!, proposalId: Int!): TransactionModel!
  vote(contractAddress: String!, proposalId: Float!, vote: Float!): TransactionModel!
  createPoll(contractAddress: String!, question: String!, options: [String!]!, duration: Int!): TransactionModel!
  endPoll(contractAddress: String!, pollId: Int!): TransactionModel!
  votePoll(contractAddress: String!, pollId: Float!, optionId: Float!): TransactionModel!
  createIdea(contractAddress: String!, description: String!): TransactionModel!
  voteUpIdea(contractAddress: String!, ideaId: Float!): TransactionModel!
  governanceContracts(identifiers: [String!], contracts: [String!], type: String): [GovernanceTypes!]!
  pulseAggregation: GovernancePulseAggregation!
  maintenance: Boolean!
  githubProposals: [GithubProposal!]!
  githubOAuthToken(code: String!): String!
}

union GovernanceTypes = GovernanceTokenSnapshotContract | GovernanceEnergyContract | GovernanceOnChainContract | GovernancePulseContract

type GovernanceTokenSnapshotContract {
  address: String!
  shard: String!
  minFeeForPropose: String!
  quorum: String!
  votingDelayInBlocks: Int!
  votingPeriodInBlocks: Int!
  feeToken: EsdtToken!
  withdrawPercentageDefeated: Int!
  proposals(proposalId: Int, offset: Int! = 0, limit: Int! = 200): [GovernanceProposalModel!]!
  vetoPercentageLimit: Float!
  votingPowerDecimals: Int!
}

type GovernanceEnergyContract {
  address: String!
  shard: String!
  minFeeForPropose: String!
  quorum: String!
  votingDelayInBlocks: Int!
  votingPeriodInBlocks: Int!
  feeToken: EsdtToken!
  withdrawPercentageDefeated: Int!
  proposals(proposalId: Int, offset: Int! = 0, limit: Int! = 200): [GovernanceProposalModel!]!
  vetoPercentageLimit: Float!
  votingPowerDecimals: Int!
  minEnergyForPropose: String!
  feesCollectorAddress: String!
  energyFactoryAddress: String!
}

type GovernanceOnChainContract {
  address: String!
  shard: String!
  minFeeForPropose: String!
  quorum: String!
  votingDelayInBlocks: Int!
  votingPeriodInBlocks: Int!
  feeToken: EsdtToken!
  withdrawPercentageDefeated: Int!
  proposals(proposalId: Int, offset: Int! = 0, limit: Int! = 200): [GovernanceProposalModel!]!
  vetoPercentageLimit: Float!
  votingPowerDecimals: Int!
  totalOnChainProposals: Int!
}

type GovernancePulseContract {
  address: String!
  shard: String!
  rootHash: String!
  polls(pollId: Int, offset: Int! = 0, limit: Int! = 200): [PulsePollModel!]!
  ideas(ideaId: Int, offset: Int! = 0, limit: Int! = 200, sortBy: SortType, order: OrderType): [PulseIdeaModel!]!
  totalIdeas: Int!
  totalPolls: Int!
  userVotingPower: String!
}

type Mutation {
  createGithubProposal(title: String!, description: String!, proposal: String!, accessToken: String!): String!
}